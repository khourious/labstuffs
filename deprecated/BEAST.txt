# TempEst: explore temporal signal and clocklikeness
File > Open...
Sample Dates > Parse Dates > Defined by a prefix and its order > Order: last > Prefix: _
Parse calendar dates with variable precision
Best-fitting root > Function: heuristic residual mean squared

# Identify and remove residual sequences

# Do Maximum Likelihood Estimation

# Convert FASTA to NEX

# Set charset blocks to delimit the coding and non-coding regions
; END; BEGIN SETS; CHARSET noncoding=$0-$000; CHARSET coding=$000-$0000; CHARSET spacer=$00-$00; END;

# BEAUti: create XML for Bayesian Inference using Markov Chain Monte Carlo

## Using BETS to evaluate temporal signal

### Strict molecular clock without sampling date
File > Import Data... > *.nex
Edit > Select All > Unlink Subst. Models
Sites > noncoding > Substitution Model: HKY > Base frequencies: Estimated > Site Heterogeneicity Model: Gamma Sites > Number of Gamma Categories: 4 > Partition into codon positions: Off
Sites > coding > Substitution Model: HKY > Base frequencies: Estimated > Site Heterogeneicity Model: Gamma > Number of Gamma Categories: 4 > Partition into codon positions: 3 partitions
Clocks > default > Clock Type: Strict clock
Trees > default > Tree Prior: Coalescent: GMRF Bayesian Skyride
MCMC > Lenght of chain: 250000000 > Echo state to screen every: 100000 > Log parameters every: 100000 > Marginal likelihood estimation (MLE): generalized stepping-stone sampling > Settings > Tree working prior: product of exponential distributions
Generate BEAST file > Continue > *.skyride.woSamplingDates.GSS.strict.r1

### Relaxed molecular clock without sampling date
Clocks > default > Clock Type: Uncorrelated relaxed clock
Generate BEAST file > Continue > *.skyride.woSamplingDates.GSS.ucld.r1

### Relaxed molecular clock with sampling date
Tips > Use tip dates > Parse Dates > Defined by a prefix and its order > Order: last : Prefix: _ > Parse Dates: Parse calendar dates with variable precision > OK
Tips > Tip date sampling: Sampling uniformly from precision
Generate BEAST file > Continue > *.skyride.wSamplingDates.GSS.ucld.r1

### Strict molecular clock with sampling date
Clocks > default > Clock Type: Strict clock
Generate BEAST file > Continue > *.skyride.wSamplingDates.GSS.strict.r1

## SKYRIDE
File > Import Data... > *.nex
Edit > Select All > Unlink Subst. Models
Tips > Use tip dates > Parse Dates > Defined by a prefix and its order > Order: last : Prefix: _ > Parse Dates: Parse calendar dates with variable precision > OK
Tips > Tip date sampling: Sampling uniformly from precision
Traits > Add trait > Create a new trait > Name: location > OK
Traits > Guess trait values > Defined by its order: second > with delimiter: _
Sites > noncoding > Substitution Model: HKY > Base frequencies: Estimated > Site Heterogeneicity Model: Gamma Sites > Number of Gamma Categories: 4 > Partition into codon positions: Off
Sites > coding > Substitution Model: HKY > Base frequencies: Estimated > Site Heterogeneicity Model: Gamma > Number of Gamma Categories: 4 > Partition into codon positions: 3 partitions (positions 1, 2, 3)
Sites > location > Discrete Trait Substitution Model: Asymmetric > Infer social network with BSSVS
Clocks > default > Clock Type: Uncorrelated relaxed clock
Trees > default > Tree Prior: Coalescent: GMRF Bayesian Skyride
States > location > State Change Count Reconstruction: Reconstruct state change counts

MCMC > Lenght of chain: 500000000 > Echo state to screen every: 100000 > Log parameters every: 100000
Generate BEAST file > Continue > *.skyride.r1

### Edit XML

Change:
<uniformOperator weight="1">
To:
<uniformOperator weight="0.05">

Change:
<parameter id="default.ucld.mean" value="1.0" lower="0.0"/>
To:
<parameter id="default.ucld.mean" value="0.001" lower="0.0"/>

Change:
saveCompleteHistory="false" logCompleteHistory="false">
To:
saveCompleteHistory="true" logCompleteHistory="true">

Remove duplicate:
<generalSubstitutionModel idref="location.model"/>
add at the end of the file:
		<log id="completeJumpHistory" logEvery="10000" fileName="jumpHistory.log">
			<completeHistoryLogger>
				<markovJumpsTreeLikelihood idref="location.treeLikelihood"/>
			</completeHistoryLogger>
		</log>


### AMBIGUITY
Search for:
<!-- Number Of States =
Add the sintaxe: 
"<!--" ambiguity location "-->"

Search for:
</generalDataType>
Add the formula
		<ambiguity code="ambiguity" states="state1 state2 state3"/>

Change:
<treeDataLikelihood id="default.treeLikelihood" useAmbiguities="false">
To:
<treeDataLikelihood id="default.treeLikelihood" useAmbiguities="true">

Search for:
<parameter id="location.frequencies" dimension=
Change the number of states in dimension="0" according to the decrease of the state code
<parameter id="location.frequencies" dimension=
<parameter id="location.root.frequencies" dimension=

Change the number of states in dimension="0" according to the formula [= K*(K-1)], where K is the number of states:
<parameter id="location.rates" dimension=
<parameter id="location.indicators" dimension=

Search for:
<parameter id="location.count" value=
Change the matrix according to the number of states (create matrix in excel and remember that the main diagonal is 0.0)

---
## SKYGRID
criar matrix no excel para determinar cut-off dos change points:
no BEAUti, em Tips, copiar o valor da data da sequência mais recente (conhecida como most recent sampling date - MRSD)
no excel, colar valor da data no A1
em A2, inserir apenas o ano relacionado ao MRSD
em B2, inserir a fórmula "=A1-A2"
em B3, inserir a fórmula "=B2+1"
arrastar a coluna até o valor de anos relacionado ao ano do ancestral mais antigo (já determinado na literatura ou análise prévia)
copiar transposto (coluna para linhas) os valores criados na coluna B no bloco de notas; substituir "," por "."; substituir tabulação por espaço
procurar: <!-- Generate a gmrfSkyGridLikelihood for the Bayesian SkyGrid process       -->
deletar o campo e mudar para:
	<gmrfSkyGridLikelihood id="skygrid">
		<populationSizes>
			<!-- skygrid.logPopSize is in log units unlike other popSize                 -->
			<parameter id="skygrid.logPopSize" dimension="0" value="1.0"/>
		</populationSizes>
		<precisionParameter>
			<parameter id="skygrid.precision" value="0.1" lower="0.0"/>
		</precisionParameter>
	<!-- 1st grid point sets change point at yyyy-mm-dd, and from then always 1 year stepsizes -->
		<gridPoints>
			<parameter id="skygrid.gridPoints" value="0"/>
		</gridPoints>
		<cutOff>
			<parameter id="skygrid.cutOff" value="0"/>
		</cutOff>
		<populationTree>
			<treeModel idref="treeModel"/>
		</populationTree>
	</gmrfSkyGridLikelihood>
procurar: <parameter id="skygrid.logPopSize" dimension="0"
mudar o "dimension="0" do skygrid.logPopSize de acordo com a quantidade de change points + 1
procurar: <parameter id="skygrid.gridPoints" value="0"/>
adicionar em "value="0" a matrix criada
procurar: <parameter id="skygrid.cutOff" value=0"
determinar o cut-off de acordo com o último change point
.skygrid.r1

.exponentialGrowth.r1
